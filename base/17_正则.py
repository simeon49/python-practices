#!/usr/bin/env python
# -*- coding: utf-8 -*-

# 参考: https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000

import re

###################################################
#  表达式表:
###################################################
# 参考: http://tool.oschina.net/uploads/apidocs/jquery/regexp.html

###################################################
#  match: 判断正则表达式是否匹配
###################################################
print('============= re.match =============')
if re.match(r'^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$', 'http://www.baidu.com'):
    print('ok')
else:
    print('failed')


###################################################
#  split: 切分字符串
###################################################
print('============= re.split =============')
print(re.split(r'[\s\,]+', 'a,b, c    d'))


###################################################
#  分组: 提取子串
###################################################
print('============= 分组 =============')
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-123456')
if m:
    print(m.group())    # 010-123456
    print(m.group(1))   # 010
    print(m.group(2))   # 123456
else:
    print('failed')


###################################################
#  贪婪匹配
###################################################
print('============= 贪婪匹配 =============')
# 默认为贪婪匹配
print(re.match(r'^(\d+)(0*)$', '1023000').groups())  # ('1023000', '')
# 非贪婪匹配
print(re.match(r'^(\d+?)(0*)$', '1023000').groups())  # ('1023', '000')


###################################################
#  预编译正则表达式
#    当我们在Python中使用正则表达式时，re模块内部会干两件事情:
#       1.编译正则表达式，如果正则表达式的字符串本身不合法，会报错
#       2.用编译后的正则表达式去匹配字符串
# 如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
###################################################
print('============= 预编译正则表达式 =============')
# 编译
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print(re_telephone.match('010-12345').groups())
print(re_telephone.match('010-8086').groups())
